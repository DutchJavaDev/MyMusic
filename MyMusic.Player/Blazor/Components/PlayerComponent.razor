<div class="mt-4">
  <div class="row w-100 m-auto" style="height:100%">
    <div class="col-2">
      <div class="w-50 h-100 m-auto">
        <img id="cover_src" src="" style="width:100%; height:100%" alt="404" />
      </div>
    </div>
    <div class="col-8">
     <div class="row w-100 m-auto">
        <div class="col-1 text-center">
          @CurrentTimeString
        </div>
        <div class="col-10">
          <input class="w-100" type="range" min="0.0" max="@DurationInSeconds" value="@CurrentTimeInSeconds" onchange="window.setCurrentTime(this.value)">
        </div>
        <div class="col-1 text-center">
          @DurationString
        </div>
        <div class="col-12">
          <div class="w-50 m-auto text-center">
            <button onclick="window.playOrPause()" class="btn btn-primary">Pause / Play</button>
          </div>
        </div>
     </div>
      <audio id="audio_player" type="audio/mpeg" />
    </div>

    <div class="col-2">
      <div class="w-75 m-auto">
        <input class="w-100" type="range" min="0.1" max="1" step="0.1" value="0.6" onchange="window.setVolumne(this.value)">
      </div>
    </div>
  </div>
@*   <div class="layout">
    <div class="left">
        <div class="w-50 m-auto">
        <img id="cover_src" src="" style="width:20px; height:20px" alt="404" />
        </div>
    </div>
    <div class="center">
      <div class="row">
        <div class="col-1 text-center">
          @CurrentTimeString
        </div>
        <div class="col-10">
          <input class="w-100" type="range" min="0" max="@DurationInSeconds" value="@CurrentTimeInSeconds">
        </div>
        <div class="col-1 text-center">
          @DurationString
        </div>
      </div>
    </div>
    <div class="right">
      <div class="w-75 m-auto border">
        <input class="w-100" type="range" min="0" max="100" value="0">
      </div>
    </div>
  </div> *@
</div>

<script>
  var audioElement;
  var playerComponentReference;

  audioElement = document.getElementById("audio_player");
  audioElement.addEventListener("seeking", (event) => {
    console.log("Audio is seeking a new position.");
    // ?
  });

  window.setCurrentTime = (value) => {
      audioElement.currentTime = parseFloat(value);
  }

  window.setVolumne = (value) => {
      audioElement.volume = value
  }

  window.setPlayerComponentReference = async (reference) => { 
    playerComponentReference = reference;
  }

  window.setCoverUrl = (url) => {
    document.getElementById('cover_src').src = url;
  }

  window.playOrPause = () => {
    if (!audioElement.paused) {
      audioElement.pause();
    }
    else {
      audioElement.play();
    }
  }

  window.play = (url) => {

    if (!audioElement.paused) {
      audioElement.pause();
    }

    audioElement.src = url
    audioElement.load()
    audioElement.play()
  }

  window.pause = () => {
    audioElement.pause()
  }

  window.stop = () => {
    audioElement.pause();
  }

  audioElement.addEventListener('play', function () {
    //console.log('Audio started playing');
  });

  audioElement.addEventListener('pause', function () {
    //console.log('Audio paused');
  });

  audioElement.addEventListener('ended', function () {
    //console.log('Audio ended');
  });

  audioElement.addEventListener('timeupdate', function () {
    console.log('Current time: ' + audioElement.currentTime);
    playerComponentReference.invokeMethodAsync("SetCurrentTime", audioElement.currentTime)
  });
  // RECOGNIZING: Text = 1 / 2, Timestamp = 6640000
  // RECOGNIZING: Text = 123, Timestamp = 6440000
  // RECOGNIZING: Text = 1234, Timestamp = 6440000
  // RECOGNIZING: Text = 123452, Timestamp = 6440000
  // RECOGNIZED: Text = 1234., Timestamp = 6440000
  audioElement.addEventListener('loadedmetadata', function () {
    //console.log('Duration: ' + audioElement.duration + ' seconds');
    playerComponentReference.invokeMethodAsync("SetDurations", audioElement.duration)
  });

  audioElement.addEventListener('error', function (e) {
    console.error('Error occurred: ' + e.message);
  });
</script>
