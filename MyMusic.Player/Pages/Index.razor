@page "/"
@attribute [NavigationInfo("oi-home","HOME",0)]

<div class="container-fluid">
    <div class="w-50 m-auto">
        <SearchBar SearchCallBack="Search" />
    </div>
    <div class="search-container">
        @LastDownloadRequest Last id 
        @if(LastDownloadRequest == -1)
        {
            <div class="text-center text-white">Check logs</div>
        }
        @if (Models.Count > 0)
        {
            <div class="row">
                @foreach (var model in Models)
                {
                    <div class="col-6 mb-2">
                        <div class="row">
                            <div class="col-5">
                                <img class="img-fluid rounded" src="@model.CoverUrl" alt="404" />
                            </div>
                            <div class="col-7">
                                <div class="mb-2">
                                    <b>@model.Title</b>
                                </div>
                                <div style="text-overflow:clip">
                                    <p>@model.Description</p>
                                </div>
                                <div>
                                    @model.Durration
                                </div>
                                <div>
                                    <button @onclick="@(async (e) => await SendDownLoadAsync(model))" class="btn btn-primary">Download</button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <span class="m-auto">Search a song ........</span>
        }
    </div>
</div>

<style>
    .search-container{
        width: 100%;
        height: 900px;
        overflow-x: hidden;
        overflow-y: auto;
        text-align: center;
        padding: 20px;
    }
</style>
@code{

    [Inject]
    public SearchService SearchService { get; set; }

    [Inject]
    public ApiService ApiService { get; set; }

    public List<SearchViewModel> Models { get; set; }

    public int LastDownloadRequest { get; set; }

    protected override void OnInitialized()
    {
        Models = SearchService.SearchResults;
    }

    public async void Search(string query)
    {
        await SearchService.SearchAsync(query);

        // Scroll back to the top
        // Im lazy
        Models = Enumerable.Empty<SearchViewModel>().ToList();
        StateHasChanged();

        Models = SearchService.SearchResults;

        StateHasChanged();
    }

    public async Task SendDownLoadAsync(SearchViewModel model)
    {

        LastDownloadRequest = await ApiService.DownloadAsync(new DownloadRequest
        {
            DownloadId = model.VideoId,
            Name = model.Title,
            Release = model.Published
        });

        //StateHasChanged();

        // Store in local db to keep track in cloud page
    }
}
